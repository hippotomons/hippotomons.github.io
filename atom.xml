<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hippotomons的小窝</title>
  
  <subtitle>一个无名小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-04T13:22:42.409Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hippotomons</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Easychallenge</title>
    <link href="http://yoursite.com/2019/11/04/Easychallenge/"/>
    <id>http://yoursite.com/2019/11/04/Easychallenge/</id>
    <published>2019-11-04T12:59:30.000Z</published>
    <updated>2019-11-04T13:22:42.409Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目来源：</strong>  NJUPT_CTF </p><p><strong>题目描述：</strong>  你们走到了一个冷冷清清的谜题前面，小鱼看着题目给的信息束手无策，丈二和尚摸不着头脑 ，你嘿嘿一笑，拿出来了你随身带着的笔记本电脑，噼里啪啦的敲起来了键盘，清晰的函数逻辑和流程出现在了电脑屏幕上，你敲敲键盘，更改了几处地方，运行以后答案变出现在了电脑屏幕上。 </p><hr><p>附件下载下来发现是一个.pyc文件 :<img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E9%99%84%E4%BB%B6%E5%9B%BE%E7%89%87.png" style="zoom:33%;" /></p><p>百度得到信息：</p><blockquote><p>pyc是一种二进制文件，是由py文件经过编译后，生成的文件，是一种byte code，py文件变成pyc文件后，运行加载的速度会有所提高；另一反面，把py文件编译为pyc文件，从而可以实现部分的源码隐藏，保证了python做商业化软件时的安全性</p></blockquote><p>花了一段时间想要用些软件打开它，未果</p><p>然后在百度找软件的过程中，发现可以将pyc文件反编译回py文件</p><p>于是继续百度，了解到可以用uncompyle6这个第三方python反编译器来进行反编译:</p><blockquote><p>uncompyle6是一个原生python的跨版本反编译器和fragment反编译器，是decompyle、uncompyle、uncompyle2等的接替者。</p><p>uncompyle6可将python字节码转换回等效的python源代码，它接受python 1.3版到3.8版的字节码，这其中跨越了24年的python版本，此外还包括Dropbox的Python 2.5字节码和一些PyPy字节码。</p><p><a href="https://github.com/rocky/python-uncompyle6" target="_blank" rel="noopener">github项目</a></p></blockquote><p>然后pip install uncompyle6安装之</p><p>先把附件重命名为mima.pyc以便后续操作</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E9%87%8D%E5%91%BD%E5%90%8D%E5%90%8Epng.png" alt=""></p><p> 在mima.pyc所在文件夹位置打开cmder，输入命令 :</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o . mima.pyc</span><br></pre></td></tr></table></figure><p> 成功反编译为mima.py文件 </p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E5%8F%8D%E7%BC%96%E8%AF%91.png" alt=""></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E5%8F%8D%E7%BC%96%E8%AF%91%E5%90%8E.png" alt=""></p><p>用vscode打开mima.py，完整的python源代码便玉体横陈在我们面前了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.5.0</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: ans.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2018-08-09 11:29:44</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span><span class="params">(ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">' '</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Please Input your flag:'</span></span><br><span class="line">flag = raw_input()</span><br><span class="line">final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'correct'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br></pre></td></tr></table></figure><p>这里二话没说，先运行了一下，之后编译器提示错误，一共有两个，第一个是print’correct’报错，第二个是flag = raw_input()报错</p><p>继续百度，发现这两处错误都是由于python2和python3版本不兼容造成的</p><p>将print’correct’改为print(‘correct’)，将flag = raw_input()改为flag = eval(input())就行了</p><p>然后运行发现是需要输入一个flag值，经过运算之后，输出correct或者wrong</p><p>再回过头去仔细看代码</p><p>发现代码结构很简单，就是要求用户输入一个flag值，然后依次通过三个函数进行加密，其中encode1和encode2是做异或和加和运算，encode3是调用base64库里的b32encode()函数进行base32运算。然后将结果与代码给定的final值进行比较(这里根据final结尾的三个”=”以及均为数字和大写字母的结构也能看出是进行了base32加密)，如果相等输出correct，如果不相等，输出wrong。</p><p>所以，出题者的意思就很明显了，也就是让我们根据这个加密运算过程，写出逆过程，将final值作为输入进函数的值，然后以与之前相反的顺序调用函数，最后输出的值就是flag</p><p>接下来，就修改了原始代码，首先是进入函数的顺序改成先进函数3再进2最后进1。然后就是每个函数内部运算，+变-，-变+，异或运算的逆过程就是再做一次异或，所以不用变，base64.b32encode()改成base64.32decode()。然后把return之前的语句颠倒一下顺序，最后的拍到第一个，以此类推。需要注意的是，还要按照代码逻辑，把i和x给相互换一下，不然会报错</p><p>最后代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) - <span class="number">25</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) ^ <span class="number">36</span></span><br><span class="line">        x = x - <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span><span class="params">(ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32decode(ans)</span><br><span class="line"></span><br><span class="line">final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line">flag = <span class="string">' '</span></span><br><span class="line">flag = encode1(encode2(encode3(final)))</span><br><span class="line">print(<span class="string">"flag=&#123;&#125;"</span>.format(flag))</span><br></pre></td></tr></table></figure><p>兴奋的去运行程序，结果编译器又报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Note\CTF&gt; python -u "d:\Note\CTF\demo.py"</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "d:\Note\CTF\demo.py", line 29, in &lt;module&gt;</span><br><span class="line">    flag = encode1(encode2(encode3(final)))</span><br><span class="line">  File "d:\Note\CTF\demo.py", line 16, in encode2</span><br><span class="line">    x = ord(i) ^ 36</span><br><span class="line">TypeError: ord() expected string of length 1, but int found</span><br></pre></td></tr></table></figure><p>错误提示是ord()函数想要一个长度为1的str类型，但是现在是int类型</p><p>之后经过一番周折，发现是base64.32decode()的问题，它的返回类型是types，而这里ord()是想要一个str型的数据，于是又百度知道可以用decode()函数进行类型转换，于是将encode3(final)改为encode3(final).decode()</p><p>运行程序，还是报错，错误提示是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Note\CTF&gt; python -u "d:\Note\CTF\demo.py"</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "d:\Note\CTF\demo.py", line 29, in &lt;module&gt;</span><br><span class="line">    flag = encode1(encode2(encode3(final).decode()))</span><br><span class="line">UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa0 in position 0: invalid start byte</span><br></pre></td></tr></table></figure><p>也就是变成了UTF-8编码不能解码的问题</p><p>继续百度，发现decode()函数默认使用UTF-8编码，于是，改成encode3(final).decode(‘unicode’)和encode3(final).decode(‘gbk’)，发现还是一样的错误</p><p>最后，在stackoverflow上找到了解决方案，就是用’ISO-8859-1’编码，具体原因还不清楚，以后再研究</p><p>问题链接： <a href="https://stackoverflow.com/questions/19699367/unicodedecodeerror-utf-8-codec-cant-decode-byte" target="_blank" rel="noopener">UnicodeDecodeError: ‘utf-8’ codec can’t decode byte</a> </p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E8%A7%A3%E5%86%B3chn.png" alt=""></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E8%A7%A3%E5%86%B3en.png" alt=""></p><p> 于是改成encode3(final).decode(‘ISO-8859-1’)之后，程序顺利运行，得到flag :</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/flag.png" alt=""></p><p> 收获： </p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/easychallenge/%E7%99%BE%E5%BA%A6.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目来源：&lt;/strong&gt;  NJUPT_CTF &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目描述：&lt;/strong&gt;  你们走到了一个冷冷清清的谜题前面，小鱼看着题目给的信息束手无策，丈二和尚摸不着头脑 ，你嘿嘿一笑，拿出来了你随身带着的笔记本电脑，噼里啪啦的敲
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="pyc反编译" scheme="http://yoursite.com/tags/pyc%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="编码转换" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Normal_RSA</title>
    <link href="http://yoursite.com/2019/11/04/Normal-RSA/"/>
    <id>http://yoursite.com/2019/11/04/Normal-RSA/</id>
    <published>2019-11-04T12:31:24.000Z</published>
    <updated>2019-11-04T12:53:57.753Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目来源:</strong> PCTF</p><p><strong>题目描述:</strong> 你和小鱼走啊走走啊走，走到下一个题目一看你又一愣，怎么还是一个数学题啊 小鱼又一笑，hhhh数学在密码学里面很重要的！现在知道吃亏了吧！你哼一声不服气，我知道数学 很重要了！但是工具也很重要的，你看我拿工具把他解出来！你打开电脑折腾了一会还真的把答案 做了出来，小鱼有些吃惊，向你投过来一个赞叹的目光</p><hr><p> 附件下载下来又是一阵懵逼，一个enc文件，一个是pem文件，根据名字可以猜到一个是flag的密文， 一个是公钥（pubkey），但是这两种文件格式咱都没见过啊。。<img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E6%8C%A0%E5%A4%B4.png" style="zoom:15%;" /></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E9%99%84%E4%BB%B6.png" alt=""></p><p> flag.enc打不开，pubkey.pem倒是可以打开，里面也明确写了这是个public key，而且中间有一段base64的编码 </p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/pubkey.png" alt=""></p><p> 但是解码出来也是意义不明的乱码 </p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/base64%E4%B9%B1%E7%A0%81.png" style="zoom: 110%;" /><p>于是百度之</p><p>这个时候度娘就开始误导我了</p><p><strong>误导1：</strong></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E7%99%BE%E5%BA%A6%E7%9F%A5%E9%81%93%E7%9A%84%E8%AF%AF%E5%AF%BC1.png" alt=""></p><p> 神™midi乐谱文件。。。 </p><p><strong>误导2：</strong></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E7%99%BE%E5%BA%A6%E7%9F%A5%E9%81%93%E7%9A%84%E8%AF%AF%E5%AF%BC2.png" alt=""></p><p> 误导2让我去下了一个神盾xxxx的软件，下载下来之后发现这玩意貌似只能生成一个加密的磁盘分区，于是又去百度pem是啥，这次度娘终于靠谱了 ：</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/pem%E6%98%AF%E5%95%A5.png" alt=""></p><p> 于是去下了个openssl，然后从pubkey.pem中提取信息 :</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/openssl%E6%8F%90%E5%8F%96pem.png" alt=""></p><p>里面Modulus就是N，Exponent就是e</p><p>这里显示：</p><p>Modulus（hex）</p><p>=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</p><p>明显是个16进制数，先转换成10进制的</p><p>Modulus（dec）</p><p>=87924348264132406875276140514499937145050893665602592992418171647042491658461</p><p>对其在线质因数分解，得到p、q</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3.png" alt=""></p><p>所以现在知道了：</p><p>p=275127860351348928173285174381581152299</p><p>q=319576316814478949870590164193048041239</p><p>e=65537</p><p>然后，事情就陷入了僵局。。之后看了一下writeup，</p><p>发现是用了一个叫rsatool的工具，可以由p、q、e计算d，并生成pem文件</p><p>然后就是想办法去安装rsatool，但是发现安装它还需要安俩东西，pyasn1和gmpy，其中pyasn1顺利安上了，但是gmpy死活安不上，鼓捣了3个晚上，发现貌似是gmpy太老了，不兼容现在的各种东西，但是好像在kali上能装成，于是按照教程，成功在kali上装上了</p><p>然后按照用法，把pubkey.pem和rsatool.py放一块，从终端输入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">rsatool.py -f PEM -o private.pem -p <span class="number">275127860351348928173285174381581152299</span> -q</span><br><span class="line"><span class="number">319576316814478949870590164193048041239</span> -e <span class="number">65537</span></span><br></pre></td></tr></table></figure><p> 成功生成private.pem文件 :</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E7%94%9F%E6%88%90private.png" alt=""></p><p>然后把private.pem拖回Windows，和pubkey.pem、flag.enc放一个文件夹里，打开cmder，使用openssl用private.pem解密flag.enc文件并将明文生成txt文件</p><p>输入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsautl -decrypt <span class="nomarkup">-in</span> flag.enc -inkey private.pem -out flag.txt</span><br></pre></td></tr></table></figure><p> 成功生成flag.txt :</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/%E7%94%9F%E6%88%90flag.png" alt=""></p><p> 打开，得到flag :</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/flag.png" alt=""></p><p> 收获： </p><p><strong>Kali牛逼!</strong></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/kali%E8%A1%A8%E6%83%85%E5%8C%851.png" alt=""></p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/Normal_RSA/kali%E8%A1%A8%E6%83%85%E5%8C%852.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目来源:&lt;/strong&gt; PCTF&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目描述:&lt;/strong&gt; 你和小鱼走啊走走啊走，走到下一个题目一看你又一愣，怎么还是一个数学题啊 小鱼又一笑，hhhh数学在密码学里面很重要的！现在知道吃亏了吧！你哼一声不服气，我知道
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="RSA" scheme="http://yoursite.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>CTF密码学-混合编码</title>
    <link href="http://yoursite.com/2019/11/04/CTF%E5%AF%86%E7%A0%81%E5%AD%A6-%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/04/CTF密码学-混合编码/</id>
    <published>2019-11-04T12:22:49.000Z</published>
    <updated>2019-11-04T12:24:30.862Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目来源：</strong> poxlove3</p><p><strong>题目描述：</strong> 经过了前面那么多题目的历练，耐心细致在解题当中是 必不可少的品质，刚巧你们都有，你和小鱼越来越入迷。那么走向了下一个题目，这个题目好长 好长，你知道你们只要细心细致，答案总会被你们做出来的，你们开始慢慢的尝试，慢慢的猜想 ，功夫不负有心人，在你们耐心的一步步的解答下，答案跃然纸上，你俩默契一笑，相视击掌 走向了下面的挑战。格式为cyberpeace{小写的你解出的答案}</p><hr><p>下载下来，打开发现一长串字符：</p><p>JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzk7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM2ODsmIzY5OyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjNTI7JiM3NjsmIzEyMjsmIzEwNzsmIzUzOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc3OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiMxMDc7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzg7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjODQ7JiM2OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzUwOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc4OyYjMTA1OyYjNTY7JiM1MzsmIzc4OyYjMTIxOyYjNTY7JiM1MzsmIzc5OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM5OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjNjk7JiMxMTk7JiM3NzsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjNjU7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM2OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjMTA3OyYjNTM7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM4NDsmIzEwNzsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzEyMDsmIzc2OyYjMTIyOyYjNjk7JiMxMjA7JiM3ODsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjMTAzOyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjMTE5Ow==</p><p>根据结尾的==，还有全部是大小写字母及数字判断是base64，解码得到：</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81/QQ%E5%9B%BE%E7%89%8720191021221605.png" alt=""></p><p> 又是一种编码，查编码与加密那本小册子，发现是Unicode编码 ：</p><p><img src="https://hippotomons-1300590185.cos.ap-chengdu.myqcloud.com/%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81/Unicode.png" alt=""> </p><p>Unicode转ASCII，得到：</p><p>LzExOS8xMDEvMTA4Lzk5LzExMS8xMDkvMTAxLzExNi8xMTEvOTcvMTE2LzExNi85Ny85OS8xMDcvOTcvMTEwLzEwMC8xMDAvMTAxLzEwMi8xMDEvMTEwLzk5LzEwMS8xMTkvMTExLzExNC8xMDgvMTAw</p><p>虽然结尾没有==，但是猜测应该还是用的base64，base64解码，果然是，得到：</p><p>/119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100</p><p>这回就很明显了，全是小于128的整数，还贴心的用/给隔开了，就是ASCII了，解码之后，得到flag：</p><p>welcometoattackanddefenceworld</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目来源：&lt;/strong&gt; poxlove3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目描述：&lt;/strong&gt; 经过了前面那么多题目的历练，耐心细致在解题当中是 必不可少的品质，刚巧你们都有，你和小鱼越来越入迷。那么走向了下一个题目，这个题目好长 好长，你知道你
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2019/11/02/%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/11/02/测试/</id>
    <published>2019-11-02T14:58:07.000Z</published>
    <updated>2019-11-02T14:58:07.105Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/02/hello-world/"/>
    <id>http://yoursite.com/2019/11/02/hello-world/</id>
    <published>2019-11-02T10:59:08.804Z</published>
    <updated>2019-11-02T10:59:08.804Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
