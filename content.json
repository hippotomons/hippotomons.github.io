{"meta":{"title":"hippotomons的小窝","subtitle":"一个无名小站","description":"","author":"hippotomons","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-11-03T12:41:55.414Z","updated":"2019-11-03T09:19:15.314Z","comments":true,"path":"README.html","permalink":"http://yoursite.com/README.html","excerpt":"","text":""},{"title":"博主的碎碎念","date":"2019-11-03T04:54:17.000Z","updated":"2019-11-04T15:08:56.557Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"2019年11月4日：花果山福地，水帘洞洞天有缘人，很高兴你能发现这里 (๑¯∀¯๑)博主目前为在读苦逼网安狗一只正处于萌新阶段这里是我的修炼场，也是我的温馨小窝觉得我的博文和博客不错的话，可以留言交个朋友嘛(～￣▽￣)～ 但行好事 莫问前程 心有所念 天必佑之 尽力而为 必有所得 不忘初心 方得始终","text":"2019年11月4日：花果山福地，水帘洞洞天有缘人，很高兴你能发现这里 (๑¯∀¯๑)博主目前为在读苦逼网安狗一只正处于萌新阶段这里是我的修炼场，也是我的温馨小窝觉得我的博文和博客不错的话，可以留言交个朋友嘛(～￣▽￣)～ 但行好事 莫问前程 心有所念 天必佑之 尽力而为 必有所得 不忘初心 方得始终"},{"title":"archives","date":"2019-11-03T04:56:35.000Z","updated":"2019-11-03T04:57:09.949Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-03T04:55:19.000Z","updated":"2019-11-04T15:09:54.003Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"CTF 心得体会 C语言 杂谈"},{"title":"标签","date":"2019-11-03T04:52:50.000Z","updated":"2019-11-04T15:10:20.248Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"CTF 密码学 RSA Python pyc反编译 编码转换"},{"title":"日程表","date":"2019-11-03T04:59:32.000Z","updated":"2019-11-04T15:10:51.178Z","comments":true,"path":"schedule/index.html","permalink":"http://yoursite.com/schedule/index.html","excerpt":"","text":""}],"posts":[{"title":"【弥留之国的爱丽丝】度盘链接","slug":"【弥留之国的爱丽丝】度盘链接","date":"2020-08-11T03:44:23.985Z","updated":"2020-08-11T03:44:23.985Z","comments":true,"path":"2020/08/11/【弥留之国的爱丽丝】度盘链接/","link":"","permalink":"http://yoursite.com/2020/08/11/%E3%80%90%E5%BC%A5%E7%95%99%E4%B9%8B%E5%9B%BD%E7%9A%84%E7%88%B1%E4%B8%BD%E4%B8%9D%E3%80%91%E5%BA%A6%E7%9B%98%E9%93%BE%E6%8E%A5/","excerpt":"","text":"【弥留之国的爱丽丝】度盘链接链接：https://pan.baidu.com/s/16j3V80K_dzS2Ur5XUxkbOg提取码：mlzg复制这段内容后打开百度网盘手机App，操作更方便哦","categories":[],"tags":[]},{"title":"Easychallenge","slug":"Easychallenge","date":"2019-11-04T12:59:30.000Z","updated":"2019-11-04T13:22:42.409Z","comments":true,"path":"2019/11/04/Easychallenge/","link":"","permalink":"http://yoursite.com/2019/11/04/Easychallenge/","excerpt":"题目来源： NJUPT_CTF 题目描述： 你们走到了一个冷冷清清的谜题前面，小鱼看着题目给的信息束手无策，丈二和尚摸不着头脑 ，你嘿嘿一笑，拿出来了你随身带着的笔记本电脑，噼里啪啦的敲起来了键盘，清晰的函数逻辑和流程出现在了电脑屏幕上，你敲敲键盘，更改了几处地方，运行以后答案变出现在了电脑屏幕上。","text":"题目来源： NJUPT_CTF 题目描述： 你们走到了一个冷冷清清的谜题前面，小鱼看着题目给的信息束手无策，丈二和尚摸不着头脑 ，你嘿嘿一笑，拿出来了你随身带着的笔记本电脑，噼里啪啦的敲起来了键盘，清晰的函数逻辑和流程出现在了电脑屏幕上，你敲敲键盘，更改了几处地方，运行以后答案变出现在了电脑屏幕上。 附件下载下来发现是一个.pyc文件 : 百度得到信息： pyc是一种二进制文件，是由py文件经过编译后，生成的文件，是一种byte code，py文件变成pyc文件后，运行加载的速度会有所提高；另一反面，把py文件编译为pyc文件，从而可以实现部分的源码隐藏，保证了python做商业化软件时的安全性 花了一段时间想要用些软件打开它，未果 然后在百度找软件的过程中，发现可以将pyc文件反编译回py文件 于是继续百度，了解到可以用uncompyle6这个第三方python反编译器来进行反编译: uncompyle6是一个原生python的跨版本反编译器和fragment反编译器，是decompyle、uncompyle、uncompyle2等的接替者。 uncompyle6可将python字节码转换回等效的python源代码，它接受python 1.3版到3.8版的字节码，这其中跨越了24年的python版本，此外还包括Dropbox的Python 2.5字节码和一些PyPy字节码。 github项目 然后pip install uncompyle6安装之 先把附件重命名为mima.pyc以便后续操作 在mima.pyc所在文件夹位置打开cmder，输入命令 : 1uncompyle6 -o . mima.pyc 成功反编译为mima.py文件 用vscode打开mima.py，完整的python源代码便玉体横陈在我们面前了: 123456789101112131415161718192021222324252627282930313233343536# uncompyle6 version 3.5.0# Python bytecode 2.7 (62211)# Decompiled from: Python 3.7.4 (tags/v3.7.4:e09359112e, Jul 8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]# Embedded file name: ans.py# Compiled at: 2018-08-09 11:29:44import base64def encode1(ans): s = '' for i in ans: x = ord(i) ^ 36 x = x + 25 s += chr(x) return sdef encode2(ans): s = '' for i in ans: x = ord(i) + 36 x = x ^ 36 s += chr(x) return sdef encode3(ans): return base64.b32encode(ans)flag = ' 'print 'Please Input your flag:'flag = raw_input()final = 'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='if encode3(encode2(encode1(flag))) == final: print 'correct'else: print 'wrong' 这里二话没说，先运行了一下，之后编译器提示错误，一共有两个，第一个是print’correct’报错，第二个是flag = raw_input()报错 继续百度，发现这两处错误都是由于python2和python3版本不兼容造成的 将print’correct’改为print(‘correct’)，将flag = raw_input()改为flag = eval(input())就行了 然后运行发现是需要输入一个flag值，经过运算之后，输出correct或者wrong 再回过头去仔细看代码 发现代码结构很简单，就是要求用户输入一个flag值，然后依次通过三个函数进行加密，其中encode1和encode2是做异或和加和运算，encode3是调用base64库里的b32encode()函数进行base32运算。然后将结果与代码给定的final值进行比较(这里根据final结尾的三个”=”以及均为数字和大写字母的结构也能看出是进行了base32加密)，如果相等输出correct，如果不相等，输出wrong。 所以，出题者的意思就很明显了，也就是让我们根据这个加密运算过程，写出逆过程，将final值作为输入进函数的值，然后以与之前相反的顺序调用函数，最后输出的值就是flag 接下来，就修改了原始代码，首先是进入函数的顺序改成先进函数3再进2最后进1。然后就是每个函数内部运算，+变-，-变+，异或运算的逆过程就是再做一次异或，所以不用变，base64.b32encode()改成base64.32decode()。然后把return之前的语句颠倒一下顺序，最后的拍到第一个，以此类推。需要注意的是，还要按照代码逻辑，把i和x给相互换一下，不然会报错 最后代码如下: 123456789101112131415161718192021222324252627import base64def encode1(ans): s = '' for i in ans: x = ord(i) - 25 x = x ^ 36 s += chr(x) return sdef encode2(ans): s = '' for i in ans: x = ord(i) ^ 36 x = x - 36 s += chr(x) return sdef encode3(ans): return base64.b32decode(ans)final = 'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='flag = ' 'flag = encode1(encode2(encode3(final)))print(\"flag=&#123;&#125;\".format(flag)) 兴奋的去运行程序，结果编译器又报错: 1234567PS D:\\Note\\CTF&gt; python -u \"d:\\Note\\CTF\\demo.py\"Traceback (most recent call last): File \"d:\\Note\\CTF\\demo.py\", line 29, in &lt;module&gt; flag = encode1(encode2(encode3(final))) File \"d:\\Note\\CTF\\demo.py\", line 16, in encode2 x = ord(i) ^ 36TypeError: ord() expected string of length 1, but int found 错误提示是ord()函数想要一个长度为1的str类型，但是现在是int类型 之后经过一番周折，发现是base64.32decode()的问题，它的返回类型是types，而这里ord()是想要一个str型的数据，于是又百度知道可以用decode()函数进行类型转换，于是将encode3(final)改为encode3(final).decode() 运行程序，还是报错，错误提示是: 12345PS D:\\Note\\CTF&gt; python -u \"d:\\Note\\CTF\\demo.py\"Traceback (most recent call last): File \"d:\\Note\\CTF\\demo.py\", line 29, in &lt;module&gt; flag = encode1(encode2(encode3(final).decode()))UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa0 in position 0: invalid start byte 也就是变成了UTF-8编码不能解码的问题 继续百度，发现decode()函数默认使用UTF-8编码，于是，改成encode3(final).decode(‘unicode’)和encode3(final).decode(‘gbk’)，发现还是一样的错误 最后，在stackoverflow上找到了解决方案，就是用’ISO-8859-1’编码，具体原因还不清楚，以后再研究 问题链接： UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 于是改成encode3(final).decode(‘ISO-8859-1’)之后，程序顺利运行，得到flag : 收获：","categories":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/tags/CTF/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"pyc反编译","slug":"pyc反编译","permalink":"http://yoursite.com/tags/pyc%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"name":"编码转换","slug":"编码转换","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"}]},{"title":"Normal_RSA","slug":"Normal-RSA","date":"2019-11-04T12:31:24.000Z","updated":"2019-11-04T12:53:57.753Z","comments":true,"path":"2019/11/04/Normal-RSA/","link":"","permalink":"http://yoursite.com/2019/11/04/Normal-RSA/","excerpt":"题目来源: PCTF题目描述: 你和小鱼走啊走走啊走，走到下一个题目一看你又一愣，怎么还是一个数学题啊 小鱼又一笑，hhhh数学在密码学里面很重要的！现在知道吃亏了吧！你哼一声不服气，我知道数学 很重要了！但是工具也很重要的，你看我拿工具把他解出来！你打开电脑折腾了一会还真的把答案 做了出来，小鱼有些吃惊，向你投过来一个赞叹的目光","text":"题目来源: PCTF题目描述: 你和小鱼走啊走走啊走，走到下一个题目一看你又一愣，怎么还是一个数学题啊 小鱼又一笑，hhhh数学在密码学里面很重要的！现在知道吃亏了吧！你哼一声不服气，我知道数学 很重要了！但是工具也很重要的，你看我拿工具把他解出来！你打开电脑折腾了一会还真的把答案 做了出来，小鱼有些吃惊，向你投过来一个赞叹的目光 附件下载下来又是一阵懵逼，一个enc文件，一个是pem文件，根据名字可以猜到一个是flag的密文， 一个是公钥（pubkey），但是这两种文件格式咱都没见过啊。。 flag.enc打不开，pubkey.pem倒是可以打开，里面也明确写了这是个public key，而且中间有一段base64的编码 但是解码出来也是意义不明的乱码 于是百度之 这个时候度娘就开始误导我了 误导1： 神™midi乐谱文件。。。 误导2： 误导2让我去下了一个神盾xxxx的软件，下载下来之后发现这玩意貌似只能生成一个加密的磁盘分区，于是又去百度pem是啥，这次度娘终于靠谱了 ： 于是去下了个openssl，然后从pubkey.pem中提取信息 : 里面Modulus就是N，Exponent就是e 这里显示： Modulus（hex） =C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD 明显是个16进制数，先转换成10进制的 Modulus（dec） =87924348264132406875276140514499937145050893665602592992418171647042491658461 对其在线质因数分解，得到p、q 所以现在知道了： p=275127860351348928173285174381581152299 q=319576316814478949870590164193048041239 e=65537 然后，事情就陷入了僵局。。之后看了一下writeup， 发现是用了一个叫rsatool的工具，可以由p、q、e计算d，并生成pem文件 然后就是想办法去安装rsatool，但是发现安装它还需要安俩东西，pyasn1和gmpy，其中pyasn1顺利安上了，但是gmpy死活安不上，鼓捣了3个晚上，发现貌似是gmpy太老了，不兼容现在的各种东西，但是好像在kali上能装成，于是按照教程，成功在kali上装上了 然后按照用法，把pubkey.pem和rsatool.py放一块，从终端输入命令： 123pythonrsatool.py -f PEM -o private.pem -p 275127860351348928173285174381581152299 -q319576316814478949870590164193048041239 -e 65537 成功生成private.pem文件 : 然后把private.pem拖回Windows，和pubkey.pem、flag.enc放一个文件夹里，打开cmder，使用openssl用private.pem解密flag.enc文件并将明文生成txt文件 输入命令： 1rsautl -decrypt -in flag.enc -inkey private.pem -out flag.txt 成功生成flag.txt : 打开，得到flag : 收获： Kali牛逼!","categories":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/tags/CTF/"},{"name":"密码学","slug":"密码学","permalink":"http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"},{"name":"RSA","slug":"RSA","permalink":"http://yoursite.com/tags/RSA/"}]},{"title":"CTF密码学-混合编码","slug":"CTF密码学-混合编码","date":"2019-11-04T12:22:49.000Z","updated":"2019-11-04T13:30:34.303Z","comments":true,"path":"2019/11/04/CTF密码学-混合编码/","link":"","permalink":"http://yoursite.com/2019/11/04/CTF%E5%AF%86%E7%A0%81%E5%AD%A6-%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81/","excerpt":"题目来源： poxlove3题目描述： 经过了前面那么多题目的历练，耐心细致在解题当中是 必不可少的品质，刚巧你们都有，你和小鱼越来越入迷。那么走向了下一个题目，这个题目好长 好长，你知道你们只要细心细致，答案总会被你们做出来的，你们开始慢慢的尝试，慢慢的猜想 ，功夫不负有心人，在你们耐心的一步步的解答下，答案跃然纸上，你俩默契一笑，相视击掌 走向了下面的挑战。格式为cyberpeace{小写的你解出的答案}","text":"题目来源： poxlove3题目描述： 经过了前面那么多题目的历练，耐心细致在解题当中是 必不可少的品质，刚巧你们都有，你和小鱼越来越入迷。那么走向了下一个题目，这个题目好长 好长，你知道你们只要细心细致，答案总会被你们做出来的，你们开始慢慢的尝试，慢慢的猜想 ，功夫不负有心人，在你们耐心的一步步的解答下，答案跃然纸上，你俩默契一笑，相视击掌 走向了下面的挑战。格式为cyberpeace{小写的你解出的答案} 下载下来，打开发现一长串字符： JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzk7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM2ODsmIzY5OyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjNTI7JiM3NjsmIzEyMjsmIzEwNzsmIzUzOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc3OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiMxMDc7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzg7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjODQ7JiM2OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzUwOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc4OyYjMTA1OyYjNTY7JiM1MzsmIzc4OyYjMTIxOyYjNTY7JiM1MzsmIzc5OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM5OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjNjk7JiMxMTk7JiM3NzsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjNjU7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM2OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjMTA3OyYjNTM7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM4NDsmIzEwNzsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzEyMDsmIzc2OyYjMTIyOyYjNjk7JiMxMjA7JiM3ODsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjMTAzOyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjMTE5Ow== 根据结尾的==，还有全部是大小写字母及数字判断是base64，解码得到： 又是一种编码，查编码与加密那本小册子，发现是Unicode编码 ： Unicode转ASCII，得到： LzExOS8xMDEvMTA4Lzk5LzExMS8xMDkvMTAxLzExNi8xMTEvOTcvMTE2LzExNi85Ny85OS8xMDcvOTcvMTEwLzEwMC8xMDAvMTAxLzEwMi8xMDEvMTEwLzk5LzEwMS8xMTkvMTExLzExNC8xMDgvMTAw 虽然结尾没有==，但是猜测应该还是用的base64，base64解码，果然是，得到： /119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100 这回就很明显了，全是小于128的整数，还贴心的用/给隔开了，就是ASCII了，解码之后，得到flag： welcometoattackanddefenceworld","categories":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/tags/CTF/"},{"name":"编码转换","slug":"编码转换","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"},{"name":"密码学","slug":"密码学","permalink":"http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}]},{"title":"测试","slug":"测试","date":"2019-11-02T14:58:07.000Z","updated":"2019-11-02T14:58:07.105Z","comments":true,"path":"2019/11/02/测试/","link":"","permalink":"http://yoursite.com/2019/11/02/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-11-02T10:59:08.804Z","updated":"2019-11-02T10:59:08.804Z","comments":true,"path":"2019/11/02/hello-world/","link":"","permalink":"http://yoursite.com/2019/11/02/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}